<%
# Input parameters
drone_namespace     = @settings["drone_namespace"]
gps                 = @settings["gps"] == "true"
simulation          = @settings["simulation"] == "true"
estimator_plugin    = @settings["estimator_plugin"]

# Other parameters
behavior_type               = "position" # "trajectory"
motion_controller_plugin    = "pid_speed_controller" # "differential_flatness_controller"

if simulation
    config_path     = "sim_config"
    platform_config_file = "sim_config/platform_config.yaml"
else
    config_path     = "real_config"
    platform_config_file = "real_config/platform_config_odom.yaml"
end

if estimator_plugin == "mocap_pose"
    platform_config_file = "real_config/platform_config_mocap.yaml"
    state_estimator_config_file = "real_config/state_estimator_mocap.yaml"
elsif estimator_plugin == "raw_odometry"

    if gps and not simulation
        state_estimator_config_file = "real_config/state_estimator_gps.yaml"
    elsif gps and simulation
        state_estimator_config_file = "sim_config/state_estimator_gps.yaml"
    end

    if not gps and not simulation
        state_estimator_config_file = "real_config/state_estimator_odom.yaml"
    elsif not gps and simulation
        state_estimator_config_file = "sim_config/state_estimator_odom.yaml"
    end
end

%>

name: ros2_example
root: ./
startup_window: params
pre_window: ls; ls
windows:
  - params:
      layout: tiled
      panes:
        - ros2 run agi_alphanumeric_viewer agi_alphanumeric_viewer_node use_sim_time:=<%= simulation %> --ros-args -r  __ns:=/<%= drone_namespace %> 
        - ros2 run px4_ros2_offboard control use_sim_time:=<%= simulation %>
        - ros2 launch px4_ros2_offboard offboard_velocity_control.launch.py use_sim_time:=<%= simulation %>
        
        
  - processes:
      layout: even-horizontal
      panes:
        - sudo MicroXRCEAgent serial --dev /dev/ttyUSB0 -b 921600
        - ls #cd /workspaces/agipix_control/src/thirdparty/PX4-Autopilot && make px4_sitl gz_x500
        - ros2 launch teleop_twist_joy teleop-launch.py config_filepath:=/workspaces/agipix_control/src/px4_ros2_offboard/joy_config/ps3.config.yaml
  - analyze:
      layout: even-horizontal
      panes:
        - ros2 launch foxglove_bridge foxglove_bridge_launch.xml
        - ros2 launch as2_platform_pixhawk pixhawk_launch.py
            namespace:=<%= drone_namespace %>
            use_sim_time:=<%= simulation %>
            platform_config_file:=<%= platform_config_file %>
        - ros2 launch as2_state_estimator state_estimator_launch.py
            namespace:=<%= drone_namespace %>
            use_sim_time:=<%= simulation %>
            plugin_name:=<%= estimator_plugin %>
            plugin_config_file:=<%= state_estimator_config_file %>
  - lidar:
      layout: even-vertical
      panes:
        - sorlidar && ros2 launch livox_ros_driver2 msg_MID360_launch.py
        - sorlidar && ros2 launch fast_lio mapping.launch.py config_file:=mid360.yaml rviz:=false
        - ros2 launch odom_transformer publish_static_transforms.launch.py
  - object_detection:
      layout: even-vertical
      panes:
        - sorlidar && ros2 run yolov5_ros2 obj_detect ls
        - sorlidar && ros2 launch usb_camera_driver usb_camera_node.launch.py
  - debug:
      layout: even-vertical
      panes:
        - ros2 topic echo /fmu/in/vehicle_visual_odometry
        - sorlidar && ros2 launch robot_localization ukf.launch.py


    
